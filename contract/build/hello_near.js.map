{"version":3,"file":"hello_near.js","sources":["../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/@scure/base/lib/esm/index.js","../node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/collections/unordered-set.js","../src/utils.ts","../src/internal.ts","../src/enum.ts","../src/registration.ts","../src/shop_core.ts","../src/contract.ts"],"sourcesContent":["// make PromiseIndex a nominal typing\nvar PromiseIndexBrand;\n(function (PromiseIndexBrand) {\n    PromiseIndexBrand[PromiseIndexBrand[\"_\"] = -1] = \"_\";\n})(PromiseIndexBrand || (PromiseIndexBrand = {}));\nconst TYPE_KEY = \"typeInfo\";\nvar TypeBrand;\n(function (TypeBrand) {\n    TypeBrand[\"BIGINT\"] = \"bigint\";\n    TypeBrand[\"DATE\"] = \"date\";\n})(TypeBrand || (TypeBrand = {}));\nexport const ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport const ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ACCOUNT_ID_REGEX = /^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/;\nexport function u8ArrayToBytes(array) {\n    return array.reduce((result, value) => `${result}${String.fromCharCode(value)}`, \"\");\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    return Uint8Array.from([...bytes].map((byte) => byte.charCodeAt(0)));\n}\n/**\n * Accepts a string or Uint8Array and either checks for the validity of the string or converts the Uint8Array to Bytes.\n *\n * @param stringOrU8Array - The string or Uint8Array to be checked/transformed\n * @returns Safe Bytes to be used in NEAR calls.\n */\nexport function bytes(stringOrU8Array) {\n    if (typeof stringOrU8Array === \"string\") {\n        return checkStringIsBytes(stringOrU8Array);\n    }\n    if (stringOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(stringOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(value) {\n    [...value].forEach((character, index) => {\n        assert(character.charCodeAt(0) <= 255, `string ${value} at index ${index}: ${character} is not a valid byte`);\n    });\n    return value;\n}\n/**\n * Asserts that the expression passed to the function is truthy, otherwise throws a new Error with the provided message.\n *\n * @param expression - The expression to be asserted.\n * @param message - The error message to be printed.\n */\nexport function assert(expression, message) {\n    if (!expression) {\n        throw new Error(\"assertion failed: \" + message);\n    }\n}\nexport function getValueWithOptions(value, options = {\n    deserializer: deserialize,\n}) {\n    const deserialized = deserialize(value);\n    if (deserialized === undefined || deserialized === null) {\n        return options?.defaultValue ?? null;\n    }\n    if (options?.reconstructor) {\n        return options.reconstructor(deserialized);\n    }\n    return deserialized;\n}\nexport function serializeValueWithOptions(value, { serializer } = {\n    serializer: serialize,\n}) {\n    return serializer(value);\n}\nexport function serialize(valueToSerialize) {\n    return JSON.stringify(valueToSerialize, function (key, value) {\n        if (typeof value === \"bigint\") {\n            return {\n                value: value.toString(),\n                [TYPE_KEY]: TypeBrand.BIGINT,\n            };\n        }\n        if (typeof this[key] === \"object\" &&\n            this[key] !== null &&\n            this[key] instanceof Date) {\n            return {\n                value: this[key].toISOString(),\n                [TYPE_KEY]: TypeBrand.DATE,\n            };\n        }\n        return value;\n    });\n}\nexport function deserialize(valueToDeserialize) {\n    return JSON.parse(valueToDeserialize, (_, value) => {\n        if (value !== null &&\n            typeof value === \"object\" &&\n            Object.keys(value).length === 2 &&\n            Object.keys(value).every((key) => [\"value\", TYPE_KEY].includes(key))) {\n            switch (value[TYPE_KEY]) {\n                case TypeBrand.BIGINT:\n                    return BigInt(value[\"value\"]);\n                case TypeBrand.DATE:\n                    return new Date(value[\"value\"]);\n            }\n        }\n        return value;\n    });\n}\n/**\n * Validates the Account ID according to the NEAR protocol\n * [Account ID rules](https://nomicon.io/DataStructures/Account#account-id-rules).\n *\n * @param accountId - The Account ID string you want to validate.\n */\nexport function validateAccountId(accountId) {\n    return (accountId.length >= 2 &&\n        accountId.length <= 64 &&\n        ACCOUNT_ID_REGEX.test(accountId));\n}\n","/**\n * A Promise result in near can be one of:\n * - NotReady = 0 - the promise you are specifying is still not ready, not yet failed nor successful.\n * - Successful = 1 - the promise has been successfully executed and you can retrieve the resulting value.\n * - Failed = 2 - the promise execution has failed.\n */\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\n/**\n * A promise error can either be due to the promise failing or not yet being ready.\n */\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexport const utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexport const base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = genBech32('bech32');\nexport const bech32m = genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString;\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n","import { bytes } from \"../utils\";\nimport { base58 } from \"@scure/base\";\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nvar DataLength;\n(function (DataLength) {\n    DataLength[DataLength[\"ED25519\"] = 32] = \"ED25519\";\n    DataLength[DataLength[\"SECP256K1\"] = 64] = \"SECP256K1\";\n})(DataLength || (DataLength = {}));\nfunction getCurveType(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return curveType;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction dataLength(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return {\n                [CurveType.ED25519]: DataLength.ED25519,\n                [CurveType.SECP256K1]: DataLength.SECP256K1,\n            }[curveType];\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction splitKeyTypeData(value) {\n    const idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [\n            curveTypeFromStr(value.substring(0, idx)),\n            value.substring(idx + 1),\n        ];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length, expectedLength) {\n        super(`Invalid length: ${length}. Expected: ${expectedLength}`);\n        this.length = length;\n        this.expectedLength = expectedLength;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\n/**\n * A abstraction on top of the NEAR public key string.\n */\nexport class PublicKey {\n    /**\n     * @param data - The string you want to create a PublicKey from.\n     */\n    constructor(data) {\n        const curveLenght = dataLength(data.charCodeAt(0));\n        if (data.length !== curveLenght + 1) {\n            throw new InvalidLengthError(data.length, curveLenght + 1);\n        }\n        this.type = getCurveType(data.charCodeAt(0));\n        this.data = data;\n    }\n    /**\n     * The curve type of the public key.\n     */\n    curveType() {\n        return this.type;\n    }\n    /**\n     * Create a public key from a public key string.\n     *\n     * @param publicKeyString - The public key string you want to create a PublicKey from.\n     */\n    static fromString(publicKeyString) {\n        const [curve, keyData] = splitKeyTypeData(publicKeyString);\n        let data;\n        try {\n            data = bytes(base58.decode(keyData));\n        }\n        catch (error) {\n            throw new Base58Error(error.message);\n        }\n        return new PublicKey(`${String.fromCharCode(curve)}${data}`);\n    }\n}\n","import { assert } from \"./utils\";\nimport { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\n/**\n * Logs parameters in the NEAR WASM virtual machine.\n *\n * @param params - Parameters to log.\n */\nexport function log(...params) {\n    env.log(params.reduce((accumulated, parameter, index) => {\n        // Stringify undefined\n        const param = parameter === undefined ? \"undefined\" : parameter;\n        // Convert Objects to strings and convert to string\n        const stringified = typeof param === \"object\" ? JSON.stringify(param) : `${param}`;\n        if (index === 0) {\n            return stringified;\n        }\n        return `${accumulated} ${stringified}`;\n    }, \"\"));\n}\n/**\n * Returns the account ID of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\n/**\n * Returns the public key of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the account that called the function.\n * Can only be called in a call or initialize function.\n */\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the current contract - the contract that is being executed.\n */\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\n/**\n * Returns the current block index.\n */\nexport function blockIndex() {\n    return env.block_index();\n}\n/**\n * Returns the current block height.\n */\nexport function blockHeight() {\n    return blockIndex();\n}\n/**\n * Returns the current block timestamp.\n */\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\n/**\n * Returns the current epoch height.\n */\nexport function epochHeight() {\n    return env.epoch_height();\n}\n/**\n * Returns the amount of NEAR attached to this function call.\n * Can only be called in payable functions.\n */\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\n/**\n * Returns the amount of Gas that was attached to this function call.\n */\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\n/**\n * Returns the amount of Gas that has been used by this function call until now.\n */\nexport function usedGas() {\n    return env.used_gas();\n}\n/**\n * Returns the current account's account balance.\n */\nexport function accountBalance() {\n    return env.account_balance();\n}\n/**\n * Returns the current account's locked balance.\n */\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\n/**\n * Reads the value from NEAR storage that is stored under the provided key.\n *\n * @param key - The key to read from storage.\n */\nexport function storageRead(key) {\n    const returnValue = env.storage_read(key, 0);\n    if (returnValue !== 1n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n/**\n * Checks for the existance of a value under the provided key in NEAR storage.\n *\n * @param key - The key to check for in storage.\n */\nexport function storageHasKey(key) {\n    return env.storage_has_key(key) === 1n;\n}\n/**\n * Get the last written or removed value from NEAR storage.\n */\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\n/**\n * Returns the current accounts NEAR storage usage.\n */\nexport function storageUsage() {\n    return env.storage_usage();\n}\n/**\n * Writes the provided bytes to NEAR storage under the provided key.\n *\n * @param key - The key under which to store the value.\n * @param value - The value to store.\n */\nexport function storageWrite(key, value) {\n    return env.storage_write(key, value, EVICTED_REGISTER) === 1n;\n}\n/**\n * Removes the value of the provided key from NEAR storage.\n *\n * @param key - The key to be removed.\n */\nexport function storageRemove(key) {\n    return env.storage_remove(key, EVICTED_REGISTER) === 1n;\n}\n/**\n * Returns the cost of storing 0 Byte on NEAR storage.\n */\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n/**\n * Returns the arguments passed to the current smart contract call.\n */\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\n/**\n * Returns the value from the NEAR WASM virtual machine.\n *\n * @param value - The value to return.\n */\nexport function valueReturn(value) {\n    env.value_return(value);\n}\n/**\n * Returns a random string of bytes.\n */\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\n/**\n * Join an arbitrary array of NEAR promises.\n *\n * @param promiseIndexes - An arbitrary array of NEAR promise indexes to join.\n */\nexport function promiseAnd(...promiseIndexes) {\n    return env.promise_and(...promiseIndexes);\n}\n/**\n * Create a NEAR promise which will have multiple promise actions inside.\n *\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\n/**\n * Attach a callback NEAR promise to a batch of NEAR promise actions.\n *\n * @param promiseIndex - The NEAR promise index of the batch.\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\n/**\n * Attach a create account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a create account action to.\n */\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\n/**\n * Attach a deploy contract promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a deploy contract action to.\n * @param code - The WASM byte code of the contract to be deployed.\n */\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\n/**\n * Attach a transfer promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a transfer action to.\n * @param amount - The amount of NEAR to transfer.\n */\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\n/**\n * Attach a stake promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a stake action to.\n * @param amount - The amount of NEAR to stake.\n * @param publicKey - The public key with which to stake.\n */\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\n/**\n * Attach a add full access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add full access key action to.\n * @param publicKey - The public key to add as a full access key.\n * @param nonce - The nonce to use.\n */\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\n/**\n * Attach a add access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add access key action to.\n * @param publicKey - The public key to add.\n * @param nonce - The nonce to use.\n * @param allowance - The allowance of the access key.\n * @param receiverId - The account ID of the receiver.\n * @param methodNames - The names of the method to allow the key for.\n */\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\n/**\n * Attach a delete key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete key action to.\n * @param publicKey - The public key to delete.\n */\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\n/**\n * Attach a delete account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete account action to.\n * @param beneficiaryId - The account ID of the beneficiary - the account that receives the remaining amount of NEAR.\n */\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\n/**\n * The number of promise results available.\n */\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index.\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResult(promiseIndex) {\n    const status = env.promise_result(promiseIndex, 0);\n    assert(Number(status) === PromiseResult.Successful, `Promise result ${status == PromiseResult.Failed\n        ? \"Failed\"\n        : status == PromiseResult.NotReady\n            ? \"NotReady\"\n            : status}`);\n    return env.read_register(0);\n}\n/**\n * Executes the promise in the NEAR WASM virtual machine.\n *\n * @param promiseIndex - The index of the promise to execute.\n */\nexport function promiseReturn(promiseIndex) {\n    env.promise_return(promiseIndex);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    const returnValue = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (returnValue === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    return env.alt_bn128_pairing_check(value) === 1n;\n}\n","import * as near from \"./api\";\nimport { deserialize, serialize } from \"./utils\";\n/**\n * Tells the SDK to use this function as the initialization function of the contract.\n *\n * @param _empty - An empty object.\n */\nexport function initialize(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\n/**\n * Tells the SDK to expose this function as a view function.\n *\n * @param _empty - An empty object.\n */\nexport function view(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\nexport function call({ privateFunction = false, payableFunction = false, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            if (privateFunction &&\n                near.predecessorAccountId() !== near.currentAccountId()) {\n                throw new Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > 0n) {\n                throw new Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\n/**\n * Tells the SDK to apply an array of passed in middleware to the function execution.\n *\n * @param middlewares - The middlewares to be executed.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function middleware(...middlewares) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            try {\n                middlewares.forEach((middleware) => middleware(...args));\n            }\n            catch (error) {\n                throw new Error(error);\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function NearBindgen({ requireInit = false, serializer = serialize, deserializer = deserialize, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageRead(\"STATE\");\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(objectToSave) {\n                near.storageWrite(\"STATE\", this._serialize(objectToSave));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value, forReturn = false) {\n                if (forReturn) {\n                    return JSON.stringify(value, (_, value) => typeof value === \"bigint\" ? `${value}` : value);\n                }\n                return serializer(value);\n            }\n            static _deserialize(value) {\n                return deserializer(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    const reconstructor = classObject[item].constructor?.reconstruct;\n                    classObject[item] = reconstructor\n                        ? reconstructor(plainObject[item])\n                        : plainObject[item];\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","import * as near from \"../api\";\nimport { getValueWithOptions, serializeValueWithOptions, } from \"../utils\";\n/**\n * A lookup map that stores data in NEAR storage.\n */\nexport class LookupMap {\n    /**\n     * @param keyPrefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    /**\n     * Checks whether the collection contains the value.\n     *\n     * @param key - The value for which to check the presence.\n     */\n    containsKey(key) {\n        const storageKey = this.keyPrefix + key;\n        return near.storageHasKey(storageKey);\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const storageKey = this.keyPrefix + key;\n        const value = near.storageRead(storageKey);\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const storageKey = this.keyPrefix + key;\n        if (!near.storageRemove(storageKey)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param newValue - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, newValue, options) {\n        const storageKey = this.keyPrefix + key;\n        const storageValue = serializeValueWithOptions(newValue, options);\n        if (!near.storageWrite(storageKey, storageValue)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     * @param options - Options for storing the data.\n     */\n    extend(keyValuePairs, options) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value, options);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","import * as near from \"../api\";\nimport { assert, getValueWithOptions, u8ArrayToBytes, serializeValueWithOptions, ERR_INCONSISTENT_STATE, ERR_INDEX_OUT_OF_BOUNDS, } from \"../utils\";\nfunction indexToKey(prefix, index) {\n    const data = new Uint32Array([index]);\n    const array = new Uint8Array(data.buffer);\n    const key = u8ArrayToBytes(array);\n    return prefix + key;\n}\n/**\n * An iterable implementation of vector that stores its content on the trie.\n * Uses the following map: index -> element\n */\nexport class Vector {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     * @param length - The initial length of the collection. By default 0.\n     */\n    constructor(prefix, length = 0) {\n        this.prefix = prefix;\n        this.length = length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this.length === 0;\n    }\n    /**\n     * Get the data stored at the provided index.\n     *\n     * @param index - The index at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(index, options) {\n        if (index >= this.length) {\n            return options?.defaultValue ?? null;\n        }\n        const storageKey = indexToKey(this.prefix, index);\n        const value = near.storageRead(storageKey);\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes an element from the vector and returns it in serialized form.\n     * The removed element is replaced by the last element of the vector.\n     * Does not preserve ordering, but is `O(1)`.\n     *\n     * @param index - The index at which to remove the element.\n     * @param options - Options for retrieving and storing the data.\n     */\n    swapRemove(index, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        if (index + 1 === this.length) {\n            return this.pop(options);\n        }\n        const key = indexToKey(this.prefix, index);\n        const last = this.pop(options);\n        assert(near.storageWrite(key, serializeValueWithOptions(last, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Adds data to the collection.\n     *\n     * @param element - The data to store.\n     * @param options - Options for storing the data.\n     */\n    push(element, options) {\n        const key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWrite(key, serializeValueWithOptions(element, options));\n    }\n    /**\n     * Removes and retrieves the element with the highest index.\n     *\n     * @param options - Options for retrieving the data.\n     */\n    pop(options) {\n        if (this.isEmpty()) {\n            return options?.defaultValue ?? null;\n        }\n        const lastIndex = this.length - 1;\n        const lastKey = indexToKey(this.prefix, lastIndex);\n        this.length -= 1;\n        assert(near.storageRemove(lastKey), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Replaces the data stored at the provided index with the provided data and returns the previously stored data.\n     *\n     * @param index - The index at which to replace the data.\n     * @param element - The data to replace with.\n     * @param options - Options for retrieving and storing the data.\n     */\n    replace(index, element, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        const key = indexToKey(this.prefix, index);\n        assert(near.storageWrite(key, serializeValueWithOptions(element, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of elements.\n     *\n     * @param elements - The elements to extend the collection with.\n     */\n    extend(elements) {\n        for (const element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new VectorIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (let index = 0; index < this.length; index++) {\n            const key = indexToKey(this.prefix, index);\n            near.storageRemove(key);\n        }\n        this.length = 0;\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const vector = new Vector(data.prefix, data.length);\n        return vector;\n    }\n}\n/**\n * An iterator for the Vector collection.\n */\nexport class VectorIterator {\n    /**\n     * @param vector - The vector collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(vector, options) {\n        this.vector = vector;\n        this.options = options;\n        this.current = 0;\n    }\n    next() {\n        if (this.current >= this.vector.length) {\n            return { value: null, done: true };\n        }\n        const value = this.vector.get(this.current, this.options);\n        this.current += 1;\n        return { value, done: false };\n    }\n}\n","import { assert, ERR_INCONSISTENT_STATE, getValueWithOptions, serializeValueWithOptions, } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nimport { LookupMap } from \"./lookup-map\";\n/**\n * An unordered map that stores data in NEAR storage.\n */\nexport class UnorderedMap {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(prefix) {\n        this.prefix = prefix;\n        this.keys = new Vector(`${prefix}u`); // intentional different prefix with old UnorderedMap\n        this.values = new LookupMap(`${prefix}m`);\n    }\n    /**\n     * The number of elements stored in the collection.\n     */\n    get length() {\n        return this.keys.length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this.keys.isEmpty();\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const valueAndIndex = this.values.get(key);\n        if (valueAndIndex === null) {\n            return options?.defaultValue ?? null;\n        }\n        const [value] = valueAndIndex;\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param value - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, value, options) {\n        const valueAndIndex = this.values.get(key);\n        const serialized = serializeValueWithOptions(value, options);\n        if (valueAndIndex === null) {\n            const newElementIndex = this.length;\n            this.keys.push(key);\n            this.values.set(key, [serialized, newElementIndex]);\n            return null;\n        }\n        const [oldValue, oldIndex] = valueAndIndex;\n        this.values.set(key, [serialized, oldIndex]);\n        return getValueWithOptions(oldValue, options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const oldValueAndIndex = this.values.remove(key);\n        if (oldValueAndIndex === null) {\n            return options?.defaultValue ?? null;\n        }\n        const [value, index] = oldValueAndIndex;\n        assert(this.keys.swapRemove(index) !== null, ERR_INCONSISTENT_STATE);\n        // the last key is swapped to key[index], the corresponding [value, index] need update\n        if (!this.keys.isEmpty() && index !== this.keys.length) {\n            // if there is still elements and it was not the last element\n            const swappedKey = this.keys.get(index);\n            const swappedValueAndIndex = this.values.get(swappedKey);\n            assert(swappedValueAndIndex !== null, ERR_INCONSISTENT_STATE);\n            this.values.set(swappedKey, [swappedValueAndIndex[0], index]);\n        }\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (const key of this.keys) {\n            // Set instead of remove to avoid loading the value from storage.\n            this.values.set(key, null);\n        }\n        this.keys.clear();\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new UnorderedMapIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     */\n    extend(keyValuePairs) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const map = new UnorderedMap(data.prefix);\n        // reconstruct keys Vector\n        map.keys = new Vector(`${data.prefix}u`);\n        map.keys.length = data.keys.length;\n        // reconstruct values LookupMap\n        map.values = new LookupMap(`${data.prefix}m`);\n        return map;\n    }\n}\n/**\n * An iterator for the UnorderedMap collection.\n */\nclass UnorderedMapIterator {\n    /**\n     * @param unorderedMap - The unordered map collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(unorderedMap, options) {\n        this.options = options;\n        this.keys = new VectorIterator(unorderedMap.keys);\n        this.map = unorderedMap.values;\n    }\n    next() {\n        const key = this.keys.next();\n        if (key.done) {\n            return { value: [key.value, null], done: key.done };\n        }\n        const valueAndIndex = this.map.get(key.value);\n        assert(valueAndIndex !== null, ERR_INCONSISTENT_STATE);\n        return {\n            done: key.done,\n            value: [key.value, getValueWithOptions(valueAndIndex[0], this.options)],\n        };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array, assert, serializeValueWithOptions, ERR_INCONSISTENT_STATE, } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nfunction serializeIndex(index) {\n    const data = new Uint32Array([index]);\n    const array = new Uint8Array(data.buffer);\n    return u8ArrayToBytes(array);\n}\nfunction deserializeIndex(rawIndex) {\n    const array = bytesToU8Array(rawIndex);\n    const [data] = new Uint32Array(array.buffer);\n    return data;\n}\n/**\n * An unordered set that stores data in NEAR storage.\n */\nexport class UnorderedSet {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(prefix) {\n        this.prefix = prefix;\n        this.elementIndexPrefix = `${prefix}i`;\n        this.elements = new Vector(`${prefix}e`);\n    }\n    /**\n     * The number of elements stored in the collection.\n     */\n    get length() {\n        return this.elements.length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this.elements.isEmpty();\n    }\n    /**\n     * Checks whether the collection contains the value.\n     *\n     * @param element - The value for which to check the presence.\n     * @param options - Options for storing data.\n     */\n    contains(element, options) {\n        const indexLookup = this.elementIndexPrefix + serializeValueWithOptions(element, options);\n        return near.storageHasKey(indexLookup);\n    }\n    /**\n     * If the set did not have this value present, `true` is returned.\n     * If the set did have this value present, `false` is returned.\n     *\n     * @param element - The value to store in the collection.\n     * @param options - Options for storing the data.\n     */\n    set(element, options) {\n        const indexLookup = this.elementIndexPrefix + serializeValueWithOptions(element, options);\n        if (near.storageRead(indexLookup)) {\n            return false;\n        }\n        const nextIndex = this.length;\n        const nextIndexRaw = serializeIndex(nextIndex);\n        near.storageWrite(indexLookup, nextIndexRaw);\n        this.elements.push(element, options);\n        return true;\n    }\n    /**\n     * Returns true if the element was present in the set.\n     *\n     * @param element - The entry to remove.\n     * @param options - Options for retrieving and storing data.\n     */\n    remove(element, options) {\n        const indexLookup = this.elementIndexPrefix + serializeValueWithOptions(element, options);\n        const indexRaw = near.storageRead(indexLookup);\n        if (!indexRaw) {\n            return false;\n        }\n        // If there is only one element then swap remove simply removes it without\n        // swapping with the last element.\n        if (this.length === 1) {\n            near.storageRemove(indexLookup);\n            const index = deserializeIndex(indexRaw);\n            this.elements.swapRemove(index);\n            return true;\n        }\n        // If there is more than one element then swap remove swaps it with the last\n        // element.\n        const lastElement = this.elements.get(this.length - 1, options);\n        assert(!!lastElement, ERR_INCONSISTENT_STATE);\n        near.storageRemove(indexLookup);\n        // If the removed element was the last element from keys, then we don't need to\n        // reinsert the lookup back.\n        if (lastElement !== element) {\n            const lastLookupElement = this.elementIndexPrefix +\n                serializeValueWithOptions(lastElement, options);\n            near.storageWrite(lastLookupElement, indexRaw);\n        }\n        const index = deserializeIndex(indexRaw);\n        this.elements.swapRemove(index);\n        return true;\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear(options) {\n        for (const element of this.elements) {\n            const indexLookup = this.elementIndexPrefix + serializeValueWithOptions(element, options);\n            near.storageRemove(indexLookup);\n        }\n        this.elements.clear();\n    }\n    [Symbol.iterator]() {\n        return this.elements[Symbol.iterator]();\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new VectorIterator(this.elements, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Extends the current collection with the passed in array of elements.\n     *\n     * @param elements - The elements to extend the collection with.\n     */\n    extend(elements) {\n        for (const element of elements) {\n            this.set(element);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const set = new UnorderedSet(data.prefix);\n        // reconstruct Vector\n        const elementsPrefix = data.prefix + \"e\";\n        set.elements = new Vector(elementsPrefix);\n        set.elements.length = data.elements.length;\n        return set;\n    }\n}\n","import { PromiseResponse } from \"./index.d\";\nimport { assert, near, UnorderedMap, UnorderedSet } from \"near-sdk-js\";\nimport { Product, ProductData, Transaction, TransactionJSON } from \"./metadata\";\n\nexport function assertOneYocto() {\n    const deposited = near.attachedDeposit();\n    assert(deposited == BigInt(1), \"Requires 1 yoctoNEAR\");\n}\n\nexport function assertAtLeastOneYocto() {\n    const deposited = near.attachedDeposit();\n    assert(deposited >= BigInt(1), \"Requires at least 1 yoctoNEAR\");\n}\n\nexport function getPromiseResults(): boolean {\n    try {\n        const result = near.promiseResult(0);\n        near.log(\"Promise returns: \" + result);\n        if (!result) throw \"Transaction failed\";\n        return true;\n    } catch (e) {\n        near.log(\"Fail\");\n        return false;\n    }\n}\n\nexport function restoreTransactionIds(collection: UnorderedSet<string>) {\n    if (collection == null) return null;\n    return UnorderedSet.reconstruct(collection);\n}\n\nexport function restoreItems(collection: UnorderedMap<ProductData>) {\n    if (collection == null) return null;\n    return UnorderedMap.reconstruct(collection);\n}\n\nexport function assertCrossContractCall() {\n    assert(\n        near.signerAccountId() != near.predecessorAccountId(),\n        \"Only for cross-contract call\"\n    );\n}\n\nexport function txToTxJson(id: string, tx: Transaction): TransactionJSON {\n    const items = restoreItems(tx.items)\n        .toArray()\n        .map(\n            ([productId, productData]): Product => ({\n                id: productId,\n                data: productData,\n            })\n        );\n    return {\n        id,\n        buyer: tx.buyer,\n        status: tx.status,\n        shippingPrice: tx.shippingPrice,\n        totalPrice: tx.totalPrice,\n        createdAt: tx.createdAt,\n        updatedAt: tx.updatedAt,\n        items,\n    };\n}\n","import { assert, near } from \"near-sdk-js\";\nimport { ShopContract } from \"./contract\";\nimport { TX_STATUS } from \"./enum\";\nimport { Product, ProductData, Transaction, TransactionJSON } from \"./metadata\";\nimport { restoreItems, restoreTransactionIds, txToTxJson } from \"./utils\";\n\nfunction internalSetProduct(\n    contract: ShopContract,\n    productId: string,\n    quantity: number,\n    unitPrice: string\n) {\n    assert(quantity >= 0 && BigInt(unitPrice) >= 0, \"Invalid product data\");\n    const productData: ProductData = {\n        quantity: quantity.toString(),\n        unitPrice,\n    };\n    contract.products.set(productId, productData);\n}\n\nexport function internalAddProduct(\n    contract: ShopContract,\n    productId: string,\n    quantity: number,\n    unitPrice: string\n) {\n    assert(!contract.products.get(productId), \"Product already exists\");\n    internalSetProduct(contract, productId, quantity, unitPrice);\n    near.log(`Product ${productId} added`);\n}\n\nexport function internalUpdateProduct(\n    contract: ShopContract,\n    productId: string,\n    quantity: number,\n    unitPrice: string\n) {\n    assert(contract.products.get(productId), \"Product not found\");\n    internalSetProduct(contract, productId, quantity, unitPrice);\n    near.log(`Product ${productId} updated`);\n}\n\nexport function internalRemoveProduct(\n    contract: ShopContract,\n    productId: string\n) {\n    assert(contract.products.get(productId), \"Product not found\");\n    contract.products.remove(productId);\n    near.log(`Product ${productId} removed`);\n}\n\nexport function internalGetProduct(\n    contract: ShopContract,\n    productId: string\n): Product {\n    const data = contract.products.get(productId);\n    assert(data, \"Product not found\");\n    return {\n        id: productId,\n        data,\n    };\n}\n\nexport function internalGetAllProducts(contract: ShopContract): Product[] {\n    const products: Product[] = contract.products.toArray().map(\n        ([id, data]): Product => ({\n            id,\n            data,\n        })\n    );\n    return products;\n}\n\nexport function internalSendNEAR(receiverId: string, amount: bigint) {\n    assert(amount > 0, \"Sending amount must greater than 0\");\n    assert(\n        near.accountBalance() > amount,\n        `Not enough balance ${near.accountBalance()} to send ${amount}`\n    );\n    const promise = near.promiseBatchCreate(receiverId);\n    near.promiseBatchActionTransfer(promise, amount);\n    near.promiseReturn(promise);\n}\n\nexport function internalGetTx(\n    contract: ShopContract,\n    txId: string,\n    accountId?: string\n) {\n    if (accountId) {\n        assert(contract.accounts.containsKey(accountId), \"Account not found\");\n        assert(\n            contract.accounts.get(accountId).contains(txId),\n            \"Account does not have the transaction\"\n        );\n    }\n    const tx = contract.transactionById.get(txId);\n    assert(tx, \"Transaction not found\");\n    return tx;\n}\n\nexport function internalGetTxsByAccountId(\n    contract: ShopContract,\n    accountId: string\n) {\n    assert(contract.accounts.containsKey(accountId), \"Account not found\");\n    const txIds = restoreTransactionIds(\n        contract.accounts.get(accountId)\n    ).toArray();\n    const txsJson = txIds.map((id) => txToTxJson(id, internalGetTx(contract, id)));\n    return txsJson;\n}\n\nexport function internalUpdateTx(\n    contract: ShopContract,\n    txId: string,\n    oldStatus: TX_STATUS,\n    newStatus: TX_STATUS,\n    accountId?: string\n) {\n    const tx = internalGetTx(contract, txId, accountId);\n    assert(tx.status === oldStatus, `Transaction status must be ${oldStatus}`);\n    tx.status = newStatus;\n    tx.updatedAt = new Date().toISOString();\n    contract.transactionById.set(txId, tx);\n    near.log(`Transaction status ${txId} has been updated to ${newStatus}`);\n    return tx;\n}\n","export enum TX_STATUS {\n    UNPAID = \"0\",\n    PENDING = \"1\",\n    TRANSFERRING = \"2\",\n    SUCCESS = \"3\",\n    CANCELED = \"4\",\n    REFUNDING = \"5\",\n    REFUNDED = \"6\",\n}\n\nexport enum GAS {\n    FT_ON_PURCHASE = 100_000_000_000_000,\n    FT_ON_REFUND = 100_000_000_000_000,\n    FT_ON_TRANSFER = 100_000_000_000_000,\n    FT_ON_REGISTER = 100_000_000_000_000,\n    RESOLVE_BUY_TOKEN = 100_000_000_000_000,\n    RESOLVE_REGISTER = 100_000_000_000_000,\n    RESOLVE_CREATE_ORDER = 100_000_000_000_000,\n    RESOLVE_CANCEL_ORDER = 100_000_000_000_000,\n}\n","import { assert, bytes, near, UnorderedSet } from \"near-sdk-js\";\nimport { ShopContract } from \"./contract\";\nimport { GAS } from \"./enum\";\nimport { internalSendNEAR } from \"./internal\";\nimport { getPromiseResults } from \"./utils\";\n\nexport function internalRegister(contract: ShopContract) {\n    const accountId = near.predecessorAccountId();\n    assert(\n        !contract.accounts.containsKey(accountId),\n        \"Account is already registered\"\n    );\n\n    const attachedDeposit = near.attachedDeposit();\n    const initialStorage = near.storageUsage();\n    let transactions: UnorderedSet<string> = new UnorderedSet(\"t\" + accountId);\n    contract.accounts.set(accountId, transactions);\n    contract.depositById.set(accountId, BigInt(0));\n    const requiredDeposit =\n        (near.storageUsage() - initialStorage) * near.storageByteCost();\n    contract.depositById.set(accountId, BigInt(requiredDeposit));\n\n    assert(\n        attachedDeposit > requiredDeposit,\n        \"Not enough deposit for register_call\"\n    );\n\n    const promise = near.promiseBatchCreate(contract.ft_contract);\n    near.promiseBatchActionFunctionCall(\n        promise,\n        \"ft_on_register\",\n        bytes(JSON.stringify({})),\n        attachedDeposit - requiredDeposit,\n        GAS.FT_ON_REGISTER\n    );\n    near.promiseThen(\n        promise,\n        near.currentAccountId(),\n        \"resolve_register\",\n        bytes(JSON.stringify({ deposited: attachedDeposit.toString() })),\n        0,\n        GAS.RESOLVE_REGISTER\n    );\n    return near.promiseReturn(promise);\n}\n\nexport function internalResolveRegister(\n    contract: ShopContract,\n    deposited: string\n) {\n    const response = getPromiseResults();\n    if (!response) {\n        //Revert and refund\n        const accountId = near.signerAccountId();\n        if (contract.accounts.containsKey(accountId)) {\n            contract.accounts.remove(accountId);\n            contract.depositById.remove(accountId);\n            internalSendNEAR(accountId, BigInt(deposited));\n        }\n        return false;\n    }\n    return true;\n}\n","import { bytes, LookupSet, UnorderedMap, UnorderedSet } from \"near-sdk-js\";\nimport { assert } from \"near-sdk-js\";\nimport { near } from \"near-sdk-js\";\nimport { Item } from \".\";\nimport { ShopContract } from \"./contract\";\nimport { GAS, TX_STATUS } from \"./enum\";\nimport { internalSendNEAR, internalUpdateTx } from \"./internal\";\nimport { ProductData, Transaction } from \"./metadata\";\nimport {\n    assertCrossContractCall,\n    getPromiseResults,\n    restoreTransactionIds,\n} from \"./utils\";\n\nexport function internalBuyToken(contract: ShopContract) {\n    const promise = near.promiseBatchCreate(contract.ft_contract);\n    const nearAmount = near.attachedDeposit();\n    near.promiseBatchActionFunctionCall(\n        promise,\n        \"on_buy_ft\",\n        bytes(JSON.stringify({})),\n        nearAmount,\n        GAS.FT_ON_PURCHASE\n    );\n    near.promiseThen(\n        promise,\n        near.currentAccountId(),\n        \"resolve_buy_token\",\n        bytes(\n            JSON.stringify({\n                amount: nearAmount.toString(),\n            })\n        ),\n        0,\n        GAS.RESOLVE_BUY_TOKEN\n    );\n    return near.promiseReturn(promise);\n}\n\nexport function internalResolveBuyToken(\n    // contract: ShopContract,\n    amount: string\n) {\n    const response = getPromiseResults();\n    if (!response) {\n        //Revert\n        internalSendNEAR(near.signerAccountId(), BigInt(amount));\n        return false;\n    }\n    return true;\n}\n\nexport function internalCreateOrder(\n    contract: ShopContract,\n    items: Item[],\n    shippingPrice: string\n) {\n    const buyer = near.predecessorAccountId();\n    assert(contract.accounts.containsKey(buyer), \"Account not found\");\n    //Check order details and calculate total price\n    let totalPrice = BigInt(shippingPrice);\n    items.forEach((item) => {\n        //Check product exists\n        const productId = item.product_id;\n        const productStock = contract.products.get(productId);\n        assert(productStock, \"Product not found\");\n        //Check ordered quantity\n        assert(item.quantity > 0, \"Invalid item quantity\");\n        assert(\n            Number(productStock.quantity) >= item.quantity,\n            `Not enough product ${productId} in stock`\n        );\n        //Check price is changed or not\n        assert(\n            productStock.unitPrice === item.unit_price,\n            `Product ${productId}'s price has been changed`\n        );\n        //Add to total price\n        totalPrice += BigInt(item.quantity) * BigInt(item.unit_price);\n        //Update stock\n        productStock.quantity = (\n            Number(productStock.quantity) - item.quantity\n        ).toString();\n        contract.products.set(productId, productStock);\n    });\n    const promise = near.promiseBatchCreate(contract.ft_contract);\n    near.promiseBatchActionFunctionCall(\n        promise,\n        \"ft_on_purchase\",\n        bytes(\n            JSON.stringify({\n                amount: totalPrice.toString(),\n                memo: `Transfer for transaction ${\n                    contract.nextTransactionId\n                } of ${near.currentAccountId()}'s contract`,\n            })\n        ),\n        1,\n        GAS.FT_ON_TRANSFER\n    );\n    near.promiseThen(\n        promise,\n        near.currentAccountId(),\n        \"resolve_create_order\",\n        bytes(\n            JSON.stringify({\n                items,\n                shipping_price: shippingPrice,\n                total_price: totalPrice.toString(),\n            })\n        ),\n        0,\n        GAS.RESOLVE_CREATE_ORDER\n    );\n    return near.promiseReturn(promise);\n}\n\nexport function internalResolveCreateOrder(\n    contract: ShopContract,\n    items: Item[],\n    shippingPrice: string,\n    totalPrice: string\n) {\n    const response = getPromiseResults();\n    if (!response) {\n        //Revert\n        items.forEach((item) => {\n            const productId = item.product_id;\n            const productStock = contract.products.get(productId);\n            productStock.quantity = (\n                Number(productStock.quantity) + item.quantity\n            ).toString();\n            contract.products.set(productId, productStock);\n        });\n        return false;\n    }\n    const buyer = near.signerAccountId();\n    //Insert new transaction to transactionById\n    const txId = contract.nextTransactionId.toString();\n    const itemSet: UnorderedMap<ProductData> = new UnorderedMap(\n        \"i\" + txId.toString()\n    );\n    items.forEach((item) => {\n        const itemData: ProductData = {\n            quantity: item.quantity.toString(),\n            unitPrice: item.unit_price,\n        };\n        itemSet.set(item.product_id, itemData);\n    });\n    const tx: Transaction = {\n        status: TX_STATUS.PENDING,\n        buyer,\n        items: itemSet,\n        shippingPrice,\n        totalPrice,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n    };\n    contract.transactionById.set(txId, tx);\n    //Insert txId to accounts\n    const buyerTxList = restoreTransactionIds(contract.accounts.get(buyer));\n    buyerTxList.set(txId);\n    contract.accounts.set(buyer, buyerTxList);\n    //Update nextTransactionId\n    contract.nextTransactionId += 1;\n    return true;\n}\n\nexport function internalCancelOrder(contract: ShopContract, txId: string) {\n    const buyerId = near.predecessorAccountId();\n    const tx = internalUpdateTx(\n        contract,\n        txId,\n        TX_STATUS.PENDING,\n        TX_STATUS.CANCELED,\n        buyerId\n    );\n    const promise = near.promiseBatchCreate(contract.ft_contract);\n    near.promiseBatchActionFunctionCall(\n        promise,\n        \"ft_on_refund\",\n        bytes(\n            JSON.stringify({\n                amount: tx.totalPrice,\n                memo: `Refund for transaction ${txId} of ${near.currentAccountId()}'s contract`,\n            })\n        ),\n        1,\n        GAS.FT_ON_REFUND\n    );\n    near.promiseThen(\n        promise,\n        near.currentAccountId(),\n        \"resolve_cancel_order\",\n        bytes(JSON.stringify({ tx_id: txId })),\n        0,\n        GAS.RESOLVE_CANCEL_ORDER\n    );\n    return near.promiseReturn(promise);\n}\n\nexport function internalResolveCancelOrder(\n    contract: ShopContract,\n    txId: string\n) {\n    const response = getPromiseResults();\n    if (!response) {\n        //Revert\n        internalUpdateTx(contract, txId, TX_STATUS.CANCELED, TX_STATUS.PENDING);\n        return false;\n    }\n    return true;\n}\n\nexport function internalConfirmOrder(contract: ShopContract, txId: string) {\n    internalUpdateTx(contract, txId, TX_STATUS.PENDING, TX_STATUS.TRANSFERRING);\n}\n\nexport function internalConfirmComplete(contract: ShopContract, txId: string) {\n    const buyerId = near.predecessorAccountId();\n    internalUpdateTx(\n        contract,\n        txId,\n        TX_STATUS.TRANSFERRING,\n        TX_STATUS.SUCCESS,\n        buyerId\n    );\n}\n","import {\n    call,\n    initialize,\n    LookupMap,\n    near,\n    NearBindgen,\n    UnorderedMap,\n    UnorderedSet,\n    view,\n} from \"near-sdk-js\";\nimport { ProductDto } from \".\";\n// import { internalGetFtRate, internalGetWallet } from \"./ft_view\";\nimport { OrderedItemsDto, TxId } from \"./index.d\";\nimport {\n    internalAddProduct,\n    internalGetAllProducts,\n    internalGetProduct,\n    internalGetTxsByAccountId,\n    internalRemoveProduct,\n    internalUpdateProduct,\n} from \"./internal\";\nimport { ProductData, Transaction } from \"./metadata\";\nimport { internalRegister, internalResolveRegister } from \"./registration\";\nimport {\n    internalBuyToken,\n    internalCancelOrder,\n    internalConfirmComplete,\n    internalConfirmOrder,\n    internalCreateOrder,\n    internalResolveBuyToken,\n    internalResolveCancelOrder,\n    internalResolveCreateOrder,\n} from \"./shop_core\";\nimport { assertOneYocto } from \"./utils\";\n\n@NearBindgen({})\nexport class ShopContract {\n    ft_contract: string;\n    owner_id: string;\n    products: UnorderedMap<ProductData>; //<ProductId, ProductData>\n    accounts: LookupMap<UnorderedSet<string>>; //<AccountId, TransactionId[]>\n    depositById: LookupMap<bigint>; //<AccountId, depositAmount>\n    transactionById: UnorderedMap<Transaction>; // <TX_ID, Transaction>\n    nextTransactionId: number;\n\n    constructor() {\n        this.ft_contract = \"\";\n        this.owner_id = \"\";\n        this.products = new UnorderedMap(\"p\");\n        this.accounts = new LookupMap(\"a\");\n        this.transactionById = new UnorderedMap(\"t\");\n        this.depositById = new LookupMap(\"d\");\n        this.nextTransactionId = 0;\n    }\n\n    @initialize({})\n    init({ owner_id, ft_contract }: { owner_id: string; ft_contract: string }) {\n        this.owner_id = owner_id;\n        this.ft_contract = ft_contract;\n    }\n\n    //Product management\n    @call({ privateFunction: true })\n    add_product({ product_id, quantity, unit_price }: ProductDto) {\n        internalAddProduct(this, product_id, quantity, unit_price);\n    }\n\n    @call({ privateFunction: true })\n    update_product({ product_id, quantity, unit_price }: ProductDto) {\n        internalUpdateProduct(this, product_id, quantity, unit_price);\n    }\n\n    @call({ privateFunction: true })\n    remove_product({ product_id }: ProductDto) {\n        internalRemoveProduct(this, product_id);\n    }\n\n    //Product view methods\n    @view({})\n    get_product({ product_id }: ProductDto) {\n        return JSON.stringify(internalGetProduct(this, product_id));\n    }\n\n    @view({})\n    get_all_products() {\n        return JSON.stringify(internalGetAllProducts(this));\n    }\n\n    @view({})\n    get_products({ product_ids }: { product_ids: string[] }) {\n        return JSON.stringify(\n            product_ids.map((id) => internalGetProduct(this, id))\n        );\n    }\n\n    //Registration\n    @call({ payableFunction: true })\n    register_call() {\n        internalRegister(this);\n    }\n\n    @call({ privateFunction: true })\n    resolve_register({ deposited }: { deposited: string }) {\n        internalResolveRegister(this, deposited);\n    }\n\n    // @call({ payableFunction: true })\n    // unregister({ id }: { id: string }) {\n    //     this.accounts.remove(id);\n    // }\n\n    //Buy ft\n    @call({ payableFunction: true })\n    buy_token_call() {\n        internalBuyToken(this);\n    }\n\n    @call({ privateFunction: true })\n    resolve_buy_token({ amount }: { amount: string }) {\n        internalResolveBuyToken(amount);\n    }\n\n    //Create order\n    @call({ payableFunction: true })\n    create_order_call({ items, shipping_price }: OrderedItemsDto) {\n        assertOneYocto();\n        internalCreateOrder(this, items, shipping_price);\n    }\n\n    @call({ privateFunction: true })\n    resolve_create_order({\n        items,\n        shipping_price,\n        total_price,\n    }: OrderedItemsDto) {\n        internalResolveCreateOrder(this, items, shipping_price, total_price);\n    }\n\n    //Cancel order\n    @call({ payableFunction: true })\n    cancel_order_call({ tx_id }: TxId) {\n        assertOneYocto();\n        internalCancelOrder(this, tx_id);\n    }\n\n    @call({ privateFunction: true })\n    resolve_cancel_order({ tx_id }: TxId) {\n        internalResolveCancelOrder(this, tx_id);\n    }\n\n    //Transfer order to buyer\n    @call({ privateFunction: true })\n    confirm_order({ tx_id }: TxId) {\n        internalConfirmOrder(this, tx_id);\n    }\n\n    //Buyer confirms to receive ordered items\n    @call({ payableFunction: true })\n    confirm_complete({ tx_id }: TxId) {\n        assertOneYocto();\n        internalConfirmComplete(this, tx_id);\n    }\n\n    @view({})\n    get_txs_of({ account_id }: { account_id: string }) {\n        return JSON.stringify(internalGetTxsByAccountId(this, account_id));\n    }\n\n    // @view({})\n    // get_ft_rate() {\n    //     return internalGetFtRate(this);\n    // }\n\n    // @view({})\n    // get_ft_balance() {\n    //     return internalGetWallet(this);\n    // }\n\n    @view({})\n    check_account({ account_id }: { account_id: string }) {\n        if (this.owner_id === account_id) {\n            return {\n                success: true,\n                msg: \"admin\",\n            };\n        }\n        const success = this.accounts.containsKey(account_id);\n        return {\n            success,\n            msg: success ? \"Account registered\" : \"Account not found\",\n        };\n    }\n}\n"],"names":["PromiseIndexBrand","TYPE_KEY","TypeBrand","ERR_INCONSISTENT_STATE","ERR_INDEX_OUT_OF_BOUNDS","u8ArrayToBytes","array","reduce","result","value","String","fromCharCode","bytesToU8Array","bytes","Uint8Array","from","map","byte","charCodeAt","stringOrU8Array","checkStringIsBytes","Error","forEach","character","index","assert","expression","message","getValueWithOptions","options","deserializer","deserialize","deserialized","undefined","defaultValue","reconstructor","serializeValueWithOptions","serializer","serialize","valueToSerialize","JSON","stringify","key","toString","BIGINT","Date","toISOString","DATE","valueToDeserialize","parse","_","Object","keys","length","every","includes","BigInt","PromiseResult","PromiseError","assertNumber","n","Number","isSafeInteger","chain","args","wrap","a","b","c","encode","Array","reverse","acc","i","decode","alphabet","digits","isArray","input","letter","indexOf","join","separator","to","split","padding","bits","chr","data","push","end","slice","normalize","fn","convertRadix","pos","res","d","carry","done","digit","digitBase","Math","floor","gcd","radix2carry","convertRadix2","mask","radix","num","radix2","revPadding","unsafeWrapper","apply","e","base16","base32","s","toUpperCase","replace","base64","base64url","genBase58","abc","base58","XMR_BLOCK_LEN","base58xmr","block","subarray","padStart","str","blockLen","j","concat","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","len","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","actualLength","TypeError","toLowerCase","lowered","sepIndex","lastIndexOf","sum","endsWith","decodeUnsafe","decodeToBytes","utf8","TextDecoder","TextEncoder","hex","CODERS","CurveType","DataLength","U64_MAX","EVICTED_REGISTER","log","params","env","accumulated","parameter","param","stringified","signerAccountId","signer_account_id","read_register","predecessorAccountId","predecessor_account_id","currentAccountId","current_account_id","attachedDeposit","attached_deposit","accountBalance","account_balance","storageRead","returnValue","storage_read","storageHasKey","storage_has_key","storageGetEvicted","storageUsage","storage_usage","storageWrite","storage_write","storageRemove","storage_remove","storageByteCost","promiseThen","promiseIndex","accountId","methodName","amount","gas","promise_then","promiseBatchCreate","promise_batch_create","promiseBatchActionFunctionCall","promise_batch_action_function_call","promiseBatchActionTransfer","promise_batch_action_transfer","promiseResult","status","promise_result","Successful","Failed","NotReady","promiseReturn","promise_return","initialize","_empty","_target","_key","_descriptor","view","call","privateFunction","payableFunction","descriptor","originalMethod","near","NearBindgen","requireInit","target","_create","_getState","rawState","_deserialize","_saveToStorage","objectToSave","_serialize","_getArgs","forReturn","_reconstruct","classObject","plainObject","item","constructor","reconstruct","_requireInit","LookupMap","keyPrefix","containsKey","storageKey","get","remove","set","newValue","storageValue","extend","keyValuePairs","indexToKey","Uint32Array","buffer","Vector","isEmpty","swapRemove","pop","last","element","lastIndex","lastKey","elements","Symbol","iterator","VectorIterator","createIteratorWithOptions","toArray","clear","vector","current","next","UnorderedMap","values","valueAndIndex","serialized","newElementIndex","oldValue","oldIndex","oldValueAndIndex","swappedKey","swappedValueAndIndex","UnorderedMapIterator","unorderedMap","serializeIndex","deserializeIndex","rawIndex","UnorderedSet","elementIndexPrefix","contains","indexLookup","nextIndex","nextIndexRaw","indexRaw","lastElement","lastLookupElement","elementsPrefix","assertOneYocto","deposited","getPromiseResults","restoreTransactionIds","collection","restoreItems","txToTxJson","id","tx","items","productId","productData","buyer","shippingPrice","totalPrice","createdAt","updatedAt","internalSetProduct","contract","quantity","unitPrice","products","internalAddProduct","internalUpdateProduct","internalRemoveProduct","internalGetProduct","internalGetAllProducts","internalSendNEAR","receiverId","promise","internalGetTx","txId","accounts","transactionById","internalGetTxsByAccountId","txIds","txsJson","internalUpdateTx","oldStatus","newStatus","TX_STATUS","GAS","internalRegister","initialStorage","transactions","depositById","requiredDeposit","ft_contract","FT_ON_REGISTER","RESOLVE_REGISTER","internalResolveRegister","response","internalBuyToken","nearAmount","FT_ON_PURCHASE","RESOLVE_BUY_TOKEN","internalResolveBuyToken","internalCreateOrder","product_id","productStock","unit_price","memo","nextTransactionId","FT_ON_TRANSFER","shipping_price","total_price","RESOLVE_CREATE_ORDER","internalResolveCreateOrder","itemSet","itemData","PENDING","buyerTxList","internalCancelOrder","buyerId","CANCELED","FT_ON_REFUND","tx_id","RESOLVE_CANCEL_ORDER","internalResolveCancelOrder","internalConfirmOrder","TRANSFERRING","internalConfirmComplete","SUCCESS","ShopContract","owner_id","init","add_product","update_product","remove_product","get_product","get_all_products","get_products","product_ids","register_call","resolve_register","buy_token_call","resolve_buy_token","create_order_call","resolve_create_order","cancel_order_call","resolve_cancel_order","confirm_order","confirm_complete","get_txs_of","account_id","check_account","success","msg"],"mappings":"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"}